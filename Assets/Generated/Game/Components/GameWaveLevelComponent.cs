//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _GameLogic_.Data.Components.WaveLevelComponent waveLevel { get { return (_GameLogic_.Data.Components.WaveLevelComponent)GetComponent(GameComponentsLookup.WaveLevel); } }
    public bool hasWaveLevel { get { return HasComponent(GameComponentsLookup.WaveLevel); } }

    public void AddWaveLevel(int newValue) {
        var index = GameComponentsLookup.WaveLevel;
        var component = (_GameLogic_.Data.Components.WaveLevelComponent)CreateComponent(index, typeof(_GameLogic_.Data.Components.WaveLevelComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceWaveLevel(int newValue) {
        var index = GameComponentsLookup.WaveLevel;
        var component = (_GameLogic_.Data.Components.WaveLevelComponent)CreateComponent(index, typeof(_GameLogic_.Data.Components.WaveLevelComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveWaveLevel() {
        RemoveComponent(GameComponentsLookup.WaveLevel);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherWaveLevel;

    public static Entitas.IMatcher<GameEntity> WaveLevel {
        get {
            if (_matcherWaveLevel == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.WaveLevel);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherWaveLevel = matcher;
            }

            return _matcherWaveLevel;
        }
    }
}
